# === Agent CLI Konfiguration ===
# Diese Datei legt globale oder projektbezogene Defaults für die CLI fest.

# 🧠 Haupt-Instruktion für den Editierbefehl
instruction: "Kommentiere den Code auf Deutsch"  # oder z. B. "Refactoriere zu async"

# 🌍 Sprache für Kommentare, Begründungen etc. (optionale Meta-Info für den Agenten)
language: "de"

# 🧾 Begründungszusammenfassung anfordern (nur für verifizierte Orgs!)
# Achtung: Führt bei nicht-verifizierten Accounts zu Fehler 400
reasoning_summary: false  # true = der Agent erzeugt automatisch eine Begründung

# 🎯 Modellwahl (nur falls CLI mehrere unterstützt – derzeit default auf GPT-4o)
# model: "gpt-4o"

# 🎲 Kreativität der Antworten (0 = deterministisch, 1 = kreativ)
temperature: 0.2  # sinnvoll für Refactorings: 0.1–0.3

# 🛡️ Maximale Tokenanzahl für die Antwort
# max_tokens: 2048  # optional – CLI limitiert automatisch anhand Kontext

# 📄 Format der Ausgabe (z. B. Plaintext oder Markdown; je nach CLI-Version)
# output_format: "plain"  # oder "markdown", "json", falls unterstützt

# 🗃️ Eingabe-Dateien explizit definieren (normalerweise per CLI-Argument)
# files:
#   - main.py
#   - utils/helpers.py

# 📁 Arbeitsverzeichnis (CLI wechselt dorthin vor Ausführung)
# working_dir: "./src"

# 🚫 Pfade/Dateien ignorieren (z. B. bei Ordner-Scans)
# exclude:
#   - "node_modules"
#   - "*.test.js"

# 🧪 Nur anzeigen, was geschehen würde (nützlich zum Testen)
# dry_run: true

# ⚠️ Erfordert ggf. verifizierten API-Zugang oder advanced CLI-Modus:
# auto_commit: false      # Ob Änderungen direkt in Git committed werden
# commit_message: "Refactored code with Agent"

# 🌐 Proxy-Konfiguration (z. B. für interne Netze)
# proxy: "http://localhost:3128"

# 🧪 Debug-Logs aktivieren
# debug: true

# === ENDE ===
