name: update-templates

on:
  push:
    paths:
      - templates.txt
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  sync:
    if: github.event_name != 'push' || github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Update templates
        run: ./scripts/update_templates.sh

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -d vendor ]; then
            git add vendor
          fi
          git add .gitmodules codex.json templates.txt
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update templates"
            git push
          fi

      - name: Trigger update-vendors via API and wait
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/update-vendors.yml/dispatches \
            -d '{"ref":"${{ github.ref_name }}"}'
          RUN_ID=""
          echo "Waiting for update-vendors run to start..."
          until [ -n "$RUN_ID" ]; do
            sleep 5
            RUN_ID=$(gh run list --workflow update-vendors.yml --branch "${GITHUB_REF_NAME}" --json databaseId,status -q 'map(select(.status=="queued" or .status=="in_progress"))[0].databaseId')
          done
          gh run watch "$RUN_ID" --interval 30
          gh run view "$RUN_ID" --exit-status
