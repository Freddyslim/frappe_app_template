#!/usr/bin/env python3
"""Generate a documentation index and vendor summaries."""
from __future__ import annotations

import argparse
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
INSTRUCTIONS = ROOT / "instructions"
VENDORS_DIR = ROOT / "vendor"
SUMMARY_DIR = INSTRUCTIONS / "vendors"
INDEX_FILE = INSTRUCTIONS / "_INDEX.md"


def summarize_vendor(path: Path) -> str:
    """Return summary text for a vendor directory."""
    slug = path.name
    dirs = [p.name for p in path.iterdir() if p.is_dir()]
    lines = [f"# {slug}", "", f"Overview of **{slug}**."]
    if dirs:
        lines.append("\nNotable directories:")
        for d in dirs[:5]:
            rel = f"../../vendor/{slug}/{d}/"
            lines.append(f"- [{d}]({rel})")
    lines.append("\n*(generated by scripts/generate_index.py)*")
    return "\n".join(lines) + "\n"


def generate_vendor_summaries() -> list[str]:
    SUMMARY_DIR.mkdir(parents=True, exist_ok=True)
    vendor_links = []
    if not VENDORS_DIR.is_dir():
        return vendor_links
    for vendor in sorted(p for p in VENDORS_DIR.iterdir() if p.is_dir()):
        summary = summarize_vendor(vendor)
        (SUMMARY_DIR / f"{vendor.name}.md").write_text(summary)
        vendor_links.append(f"- [{vendor.name}](vendors/{vendor.name}.md)")
    return vendor_links


def write_index(vendor_links: list[str]) -> None:
    lines = ["# Instructions Index", "", "## Vendor Summaries", ""]
    lines.extend(vendor_links)
    INDEX_FILE.write_text("\n".join(lines) + "\n")


def main(argv: list[str] | None = None) -> None:
    parser = argparse.ArgumentParser(description="Generate documentation index")
    parser.parse_args(argv)
    vendor_links = generate_vendor_summaries()
    write_index(vendor_links)


if __name__ == "__main__":
    main()
